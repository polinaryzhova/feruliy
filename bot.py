import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

participants = {}

class Form(StatesGroup):
    nickname = State()
    characters = State()
    style = State()
    anon_chat = State()

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞‚ú®",
        reply_markup=kb
    )
    await message.answer("–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

@dp.message_handler(lambda message: True, state='*')
async def check_subscription(message: types.Message):
    user = await bot.get_chat_member(f"@{CHANNEL_USERNAME}", message.from_user.id)
    if user.status in ['member', 'creator', 'administrator']:
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É

"
            "1) –£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—èüôåüèª"
        )
        await Form.nickname.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")

@dp.message_handler(state=Form.nickname)
async def process_nickname(message: types.Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("2) –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è!")
    await Form.characters.set()

@dp.message_handler(state=Form.characters)
async def process_characters(message: types.Message, state: FSMContext):
    await state.update_data(characters=message.text)
    await message.answer("3) –ö–∞–∫ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, –≤ —á—ë–º –≥–ª–∞–≤–Ω–∞—è –∏–∑—é–º–∏–Ω–∫–∞ —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è?üé®")
    await Form.style.set()

@dp.message_handler(state=Form.style)
async def process_style(message: types.Message, state: FSMContext):
    await state.update_data(style=message.text)
    await message.answer("4) –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç (–µ–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ: https://t.me/voprosy)")
    await Form.anon_chat.set()

@dp.message_handler(state=Form.anon_chat)
async def process_anon_chat(message: types.Message, state: FSMContext):
    await state.update_data(anon_chat=message.text)
    data = await state.get_data()
    participants[message.from_user.id] = data

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üéâ")
    await state.finish()

@dp.message_handler(commands=['draw'])
async def draw_handler(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∂–µ—Ä–µ–±—å—ë–≤–∫—É.")
        return

    users = list(participants.items())
    if len(users) < 2:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∏.")
        return

    shuffled = users[:]
    import random
    random.shuffle(shuffled)

    for (uid, data), (_, receiver_data) in zip(users, shuffled[1:] + shuffled[:1]):
        text = (
            f"–¢–≤–æ–π —É—á–∞—Å—Ç–Ω–∏–∫:

"
            f"–ù–∏–∫: {receiver_data['nickname']}
"
            f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {receiver_data['characters']}
"
            f"–ò–∑—é–º–∏–Ω–∫–∞: {receiver_data['style']}
"
            f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç: {receiver_data['anon_chat']}"
        )
        try:
            await bot.send_message(uid, text)
        except:
            continue

    await message.reply("–ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
